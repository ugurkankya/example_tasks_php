name: build

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Build PHP docker image
      run: docker build docker/php80-alpine/ --tag localbuild/php80-alpine:latest

    - name: Trivy vulnerability scanner in repo mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: fs
        exit-code: 1
        scan-ref: ./

    - name: Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: localbuild/php80-alpine:latest
        exit-code: 1

    - name: local PHP security checker
      run: find ./ -name "composer.lock" -not -path "*/vendor/*" | xargs -ti bin/localphpsecuritychecker-100 --path={}

    - name: Start mysql container
      run: docker-compose up -d mysql

    - name: Build php container
      run: docker-compose build php logger

    - name: Validate composer file
      run: docker-compose -f docker-compose.yml -f docker-compose-tasks.yml run -u $(id -u) --rm composer_validate

    - name: Run composer
      run: docker-compose -f docker-compose.yml -f docker-compose-tasks.yml run -u $(id -u) --rm composer

    - name: Create coverage directory
      run: mkdir -p tests/coverage && chmod 0777 tests/coverage

    - name: Wait for database to be ready  
      run: until docker-compose exec -T mysql mysql -uroot -proot -e "select now()"; do echo "waiting..."; sleep 1; done

    - name: Run phpcsfixer
      run: docker-compose -f docker-compose.yml -f docker-compose-tasks.yml run -u $(id -u) --rm phpcsfixer
      
    - name: Run psalm
      run: docker-compose -f docker-compose.yml -f docker-compose-tasks.yml run -u $(id -u) --rm psalm

    - name: Run psalm taint analysis
      run: docker-compose -f docker-compose.yml -f docker-compose-tasks.yml run -u $(id -u) --rm psalm_taint

    - name: Run phpstan
      run: docker-compose -f docker-compose.yml -f docker-compose-tasks.yml run -u $(id -u) --rm phpstan

    - name: Run update datebase
      run: docker-compose -f docker-compose.yml -f docker-compose-tasks.yml run -u $(id -u) --rm shell update_database.php

    - name: Run phpunit
      run: docker-compose -f docker-compose.yml -f docker-compose-tasks.yml run -u $(id -u) --rm phpunit

    - name: Run phploc
      run: docker-compose -f docker-compose.yml -f docker-compose-tasks.yml run -u $(id -u) --rm phploc
